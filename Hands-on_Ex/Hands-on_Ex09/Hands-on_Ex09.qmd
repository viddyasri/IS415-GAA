---
title: "Hands-on Exercise 9"
execute: 
  warning: false
date: "`r Sys.Date()`"
highlight-style: dracula
---

## **1. Overview - Modelling Geographic of Accessibility**

In this exercise, we will learn how to model geographical accessibility by using R’s geospatial analysis packages.

## **2. The Data**

-   URA Master Plan 2014 subzone boundary GIS data.
-   A 250m radius hexagons GIS data.
-   GIS data showing location of eldercare service.
-   A distance matrix in csv format.

## **3. Installing and Loading R Packages**

The packages that will be used are:

-   sf: Spatial data handling

-   spatialAcc: Modelling geographical accessibility

-   tidyverse, especially readr and dplyr: Attribute data handling

-   tmap: Thematic mapping

-   ggplot2: Statistical graphics

-   ggstatsplot: Statistical analysis

```{r}
pacman::p_load(tmap, SpatialAcc, sf, 
               ggstatsplot, reshape2,
               tidyverse)
```

## **4. Geospatial Data Wrangling**

### Importing data

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_NO_SEA_PL")
```

```{r}
hexagons <- st_read(dsn = "data/geospatial", layer = "hexagons") 
```

```{r}
eldercare <- st_read(dsn = "data/geospatial", layer = "ELDERCARE") 
```

### Updating CRS information

```{r}
mpsz <- st_transform(mpsz, 3414)
eldercare <- st_transform(eldercare, 3414)
hexagons <- st_transform(hexagons, 3414)
```

Verify:

```{r}
st_crs(mpsz)
```

### Cleaning and updating attribute fields of the geospatial data

The code below will be used to clean up the data tables by removing unnecessary fields and add new fields for demand and capacity.

```{r}
eldercare <- eldercare %>%
  select(fid, ADDRESSPOS) %>%
  mutate(capacity = 100)
```

```{r}
hexagons <- hexagons %>%
  select(fid) %>%
  mutate(demand = 100)
```

::: callout-note
Notice that a constant value of 100 is used. This is solely for the purpose of this exercise. In practice, the actual demand of the hexagon and capacity of the eldercare centres should be used.
:::

## **5. Aspatial Data Wrangling**

### Importing data

```{r}
ODMatrix <- read_csv("data/aspatial/OD_Matrix.csv", skip = 0)
```

### Tidying distance matrix

Transform the OD matrix from a thin format into a fat format:

```{r}
distmat <- ODMatrix %>%
  select(origin_id, destination_id, total_cost) %>%
  spread(destination_id, total_cost)%>%
  select(c(-c('origin_id')))
```

Currently, the distance is measured in metres because of the SVY21 projected coordinate system. The code below will be used to convert the unit f measurement from metre to kilometre.

```{r}
distmat_km <- as.matrix(distmat/1000)
```

## **6. Modelling and Visualising Accessibility using Hansen Method**

### Computing Hansen’s accessibility

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 2, 
                            family = "Hansen"))
```

```{r}
colnames(acc_Hansen) <- "accHansen"
```

Convert the data table into tibble format and join the acc_Hansen tibble data frame with the hexagons simple feature data frame:

```{r}
acc_Hansen <- tbl_df(acc_Hansen)
```

```{r}
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

### Visualising Hansen’s accessibility

Extracting map extend:

```{r}
mapex <- st_bbox(hexagons)
```

Use tmap to visualise:

```{r}
tmap_mode("plot")
tm_shape(hexagon_Hansen,
         bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

### Statistical graphic visualisation

First, we need to add the planning region field into hexagon_Hansen simple feature data frame:

```{r}
hexagon_Hansen <- st_join(hexagon_Hansen, mpsz, 
                          join = st_intersects)
```

Next, ggplot() will be used to plot the distribution with the boxplot graphical method:

```{r}
ggplot(data=hexagon_Hansen, 
       aes(y = log(accHansen), 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

## **7. Modelling and Visualising Accessibility using KD2SFCA Method**

### Computing KD2SFCA’s accessibility

```{r}
acc_KD2SFCA <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            d0 = 50,
                            power = 2, 
                            family = "KD2SFCA"))

colnames(acc_KD2SFCA) <- "accKD2SFCA"
acc_KD2SFCA <- tbl_df(acc_KD2SFCA)
hexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)
```

::: callout-note
Notice that KD2SFCA is used for family argument.
:::

### Visualising KD2SFCA’s accessibility

```{r}
tmap_mode("plot")
tm_shape(hexagon_KD2SFCA,
         bbox = mapex) + 
  tm_fill(col = "accKD2SFCA",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: KD2SFCA method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

::: callout-note
Notice that mapex is reused for the bbox argument.
:::

### Statistical graphic visualisation

Like before, we add the planning region field into hexagon_KD2SFCA simple feature data frame then use ggplot() to plot the distribution using the boxplot graphical method:

```{r}
hexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, 
                          join = st_intersects)
```

```{r}
ggplot(data=hexagon_KD2SFCA, 
       aes(y = accKD2SFCA, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

## **8. Modelling and Visualising Accessibility using Spatial Accessibility Measure (SAM) Method**

### Computing SAM accessibility

```{r}
acc_SAM <- data.frame(ac(hexagons$demand,
                         eldercare$capacity,
                         distmat_km, 
                         d0 = 50,
                         power = 2, 
                         family = "SAM"))

colnames(acc_SAM) <- "accSAM"
acc_SAM <- tbl_df(acc_SAM)
hexagon_SAM <- bind_cols(hexagons, acc_SAM)
```

::: callout-note
Notice that SAM is used for the family argument.
:::

### Visualising SAM’s accessibility

```{r}
tmap_mode("plot")
tm_shape(hexagon_SAM,
         bbox = mapex) + 
  tm_fill(col = "accSAM",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: SAM method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 3),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

::: callout-note
Notice that mapex is reused for the bbox argument.
:::

### Statistical graphic visualisation

```{r}
hexagon_SAM <- st_join(hexagon_SAM, mpsz, 
                       join = st_intersects)
```

```{r}
ggplot(data=hexagon_SAM, 
       aes(y = accSAM, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```
