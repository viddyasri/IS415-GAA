---
title: "Hands-on Exercise 1"
execute: 
  warning: false
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-tools: true
    code-summary: "Show code"
highlight-style: nord
---

## **1. Getting Started**

#### Installing relevant packages

In this section, we will install and load sf and tidyverse packages.

```{r}
pacman::p_load(sf, tidyverse)
```

## **2. Importing Geospatial Data**

In this section we will import:

-   a polygon feature layer in ESRI shapefile format

-   a line feature layer in ESRI shapefile format, and

-   a point feature layer in kml file format

#### Importing polygon feature data in shapefile format

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

#### Importing polyline feature data in shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

#### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## **3. Checking the Content of A Simple Feature Data Frame**

In this section, we will use different ways to retrieve information related to the content of a simple feature data frame.

#### Working with st_geometry(), glimpse() and head()

```{r}
st_geometry(mpsz)
```

```{r}
glimpse(mpsz)
```

```{r}
head(mpsz, n=5)
```

## **4. Plotting Geospatial Data**

```{r}
# type [#/ echo: false] to make the code box disappear
# type [#/ eval: false] to make the "terminal" code disappear
plot(mpsz)

# plot only geometry: plot(st_geometry(mpsz))
# plot specific attribute: plot(mpsz["PLN_AREA_N"])
```

## **5. Working with Projection**

In this section, we will project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.

#### Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz) # wrong EPSG code
```

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414) # change to right one
```

```{r}
st_crs(mpsz3414) # right EPSG code
```

#### Transforming the projection of preschool from wgs84 to svy21

```{r}
st_geometry(preschool) # wgs84
```

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

```{r}
st_geometry(preschool3414) # svy21
```

## **6. Importing and Converting An Aspatial Data**

In this section, we will import an aspatial data into R environment and save it as a tibble data frame. Next, we will convert it into a simple feature data frame.

#### Importing the aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

Examine if the data file has been imported correctly.

```{r}
list(listings)
```

#### Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Examine the content of the new simple feature data frame

```{r}
glimpse(listings_sf)
```

## **7. Geoprocessing with sf Package**

In this section, we will perform two commonly used geoprocessing functions, namely buffering and point in polygon count.

#### Buffering

Scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

Solution:

```{r}
# compute the 5-meter buffers around cycling paths
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

```{r}
# calculate the area of the buffers
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
# sum() of Base R used to derive the total land involved
sum(buffer_cycling$AREA)
```

#### Point-in-Polygon Count

Scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

Solution:

```{r}
# Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

```{r}
# check the summary statistics of the newly derived PreSch Count field by using summary()
summary(mpsz3414$`PreSch Count`)
```

```{r}
# list the planning subzone with the most number of pre-school
top_n(mpsz3414, 1, `PreSch Count`)
```

Calculate the density of pre-school by planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## **8. Exploratory Data Analysis (EDA)**

In this section, we will use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

DIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```