---
title: "Hands-on Exercise 4"
execute: 
  warning: false
date: "`r Sys.Date()`"
highlight-style: dracula
---

## **1. Overview**

In this hands-on exercise, you will learn how to compute spatial weights using R.

## **2. The Study Area and Data**

The two datasets that will be used in this exercise are:

-   Hunan county boundary layer in ESRI shapefile format

-   Hunan_2012.csv which contains selected Hunan’s local development indicators in 2012

## **3. Getting Started**

As always, we begin by installing the relevant packages. For this exercise, we will need spdep, sf, tmap and tidyverse packages of R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## **4. Getting the Data Into R Environment**

### Import shapefile into r environment

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Import csv file into r environment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

To update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe, we use the functon left_join() of dplyr package.

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## **5. Visualising Regional Development Indicator**

Now, we prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## **6. Computing Contiguity Spatial Weights**

In this section, we will use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

Based on the documentation, we are able to pass a “queen” argument that takes in TRUE or FALSE as options. If this argument is not specified as false, then as per the default, it is set to TRUE and this function will return a list of first order neighbours using the Queen criteria.

### Computing (QUEEN) contiguity based neighbours

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours \[85 with 11 links\]. There are two area units with only one neighbour \[30 65 with 1 link\].

For each polygon in our polygon object wm_q, it lists all neighboring polygons. For example, to view the neighbours for the first polygon in the object, we use the code below:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbours. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

We can retrieve the county name of Polygon with ID = 1 by using the code below, which would show that it is Anxiang county.

```{r}
hunan$County[1]
```

To view the county names of all five polygons:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

To retrieve the GDPCC of all five counties:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Display the complete weight matrix by using str():

```{r}
str(wm_q)
```

### Creating (ROOK) contiguity based neighbours

Specify Queen as FALSE to use the Rook method.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary report is slightly different with the Rook method. The most connected area unit has only 10 neighbours.

### Visualising contiguity weights

In order to create a connectivity graph for polygons, the process involves obtaining points associated with each polygon, typically achieved by using polygon centroids. The preferred method for obtaining these centroids involves using the sf package. The latitude and longitude values of these centroids are then calculated.

To accomplish this, a mapping function, specifically the map_dbl variation from the purrr package, is utilized. This function applies st_centroid to each element of the geometry column of the us.bound sf object, allowing the extraction of longitude values through double bracket notation and the index 1. This approach ensures that only the longitude values corresponding to the first point in each centroid are obtained.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

We then use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

**Plotting Queen contiguity based neighbours map**

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

**Plotting Rook contiguity based neighbours map**

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

**Plotting both Queen and Rook contiguity based neighbours maps**

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## **7. Computing distance based neighbours**

In this section, we will create distance-based weight matrices using the dnearneigh() function from the spdep package. The dnearneigh() function does this by measuring the Euclidean distance between points. You can set a distance range using lower (d1) and upper (d2) bounds with the bounds= argument.

If the data is in latitude and longitude and we set longlat=TRUE or provide a two-column matrix with longitude and latitude, the function will calculate distances on the Earth's surface using the WGS84 reference ellipsoid.

### Determine the cut-off distance

Determine the upper limit for distance band by using these steps:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.

-   Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number IDs by using knn2nb().

-   Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns length in the units of the coordinates if the coordinates are projected, otherwise it will be in km.

-   Remove the list structure of the returned object by using unlist().

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so we use this as the upper threshold as it gives certainty that all units will have at least one neighbour.

### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

On average, each region in the dataset is connected to approximately 3.68 other regions.

```{r}
str(wm_d62)
```

This is another way to display the above along with county name:

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

**Plotting fixed distance weight matrix**

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Or we could plot them next to each other:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas tend to have more neighbours and the less densely settled areas tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours. This means that the spatial relationships are spread across numerous neighbours, potentially diluting the local patterns and variations.

It is possible to control the numbers of neighbours directly using k-nearest neighbours.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

::: callout-note
Notice that each county has six neighbours.
:::

**Plotting distance based neighbours**

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## **8. Weights based on IDW**

Derive a spatial weight matrix based on Inversed Distance method.

```{r}
# compute distance between areas
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighbouring polygon will be assigned equal weight (style=“W”). Note that other more robust options are available, notably style=“B”. The zero.policy=TRUE option allows for lists of non-neighbours.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon’s eight neighbours:

```{r}
rswm_q$weights[10] 
```

Each neighbor is assigned a 0.125 of the total weight.

We can also derive a row standardised weight matrix in this way:

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## **9. Application of Spatial Weight Matrix**

In this section, we will create four different spatial lagged variables.

### Spatial lag with row-standardized weights

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can append the spatially lag GDPPC values onto hunan sf data frame by using the code below:

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

Plot:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial lag as a sum of neighboring values

This variable requires us to go back to our neighbours list, apply a function that assigns binary weights, and use glist = in the nb2listw function to explicitly assign these weights.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

Next, we append the lag_sum GDPPC field into hunan sf data frame.

```{r}
hunan <- left_join(hunan, lag.res)
```

Plot:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To add the diagonal element to the neighbour list, we need to use include.self() from spdep.

```{r}
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

::: callout-note
Notice that now \[1\] has six neighbours instead of five.
:::

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Lastly, we create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using as.data.frame().

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Plot:

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

```{r}
#add diagonal element
wm_qs <- include.self(wm_q) 
wm_qs
```

```{r}
#assign binary weights
b_weights <- lapply(wm_qs, function(x) 0*x + 1) 
b_weights[1]
```

```{r}
#use nb2listw() and glist() to explicitly assign weight values
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
#compute lag variable
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

```{r}
#convert the lag variable listw object into a data.frame
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

```{r}
#append w_sum GDPPC values onto hunan sf data.frame 
hunan <- left_join(hunan, w_sum_gdppc.res)
```

```{r}
#compare values
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

```{r}
#plot
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
